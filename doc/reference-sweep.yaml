###########################################################################
# Reference sweep specification                                           #
###########################################################################
# This is the file format used as the input to configure a spectrum       #
# monitoring sweep executed by the `edge-sensor-sweep` script.            #
###########################################################################

# The following metadata is added as-is to attrs in each saved xarray Dataset
description:
  summary: Brief description of the capture

  # manual specification of GPS location coordinates
  # (in the future, automatic GPS location via gpsd may be implemented)
  location:
  - 39.991746624418745   # lat (deg)
  - -105.26457779333897   # long (deg)
  - 1783.4   # ASL (m)

  signal_chain:
  - Signal generator, 3710 MHz CW with 10 ms square pulse modulation

output:
  # Rules:
  # - Relative paths are relative to the command line working directory
  # - Allowed string format fields:
  #   * Any capture field
  #   * {yaml_name} (the file name stem of this file)
  #   * Coordinate aliases (see below)
  #   * {start_time} is system time before the sweep begins
  path: ~/Documents/data/{radio_id}/{start_time}.zarr.zip

  # File format for the zarr data save: 'directory' or 'zip'
  store: zip

  #   Additional capture fields in output zarr data files are defined here
  #   - Each first level key defines the name of the new coordinate that will
  #     be added in the capture dimension
  #   - The second level is a list of possible values for that coordinate
  #   - The third level is a list of already-defined capture fields and field values.
  #     All of these must match in order to use this coordinate value.
  # 
  #   Update these site-specific parameters when
  #   - Radios in each sensor are swapped or newly deployed
  #   - antenna connections are changed, or new antennas are added
  # 
  #   The match fields for an alias may be defined in terms of
  #   - Fields of the RadioCapture object, including extensions from this file
  #   - `radio_id`, `yaml_name`
  #   - Other previously defined aliases from this file
  coord_aliases:
    antenna_name:
      # category names and dependent values
      Reference:
        channel: 0
      LPDA:
        channel: 1

# Radio setup parameters that apply to all captures
radio_setup:
  # The streaming source that generates IQ samples.
  #
  # Supported radio hardware and testing sources:
  # - Air7101B
  # - Air7201B
  # - SingleToneSource
  # - SawtoothSource
  # - NoiseSource
  # - TDMSFileSource
  # 
  # Additional drivers can be implemented by subclassing edge_sensor.RadioDevice
  # and importing the new class in the runner script.
  driver: Air7201B

  # time source for triggering and timestamps.
  # "host":
  # - free triggering
  # - overloads between identical captures are ignored
  # - the time base for saved capture timestamps is the host OS
  # "internal":
  # - free or periodic (strobe) triggering
  # - any overload between identical captures raises an exception
  # - the radio sample clock is synchronized to the host once at the start of sweep
  # - the time base for saved capture timestamps is the radio sample clock
  # "external":
  # - free or periodic (strobe) triggering
  # - any overload between identical captures raises an exception
  # - the radio sample clock is synchronized to the external PPS signal once at the sweep start
  # - the time base for saved capture timestamps is the radio sample clock
  time_source: internal

  # Acquisition start times will only occur at this fixed time modulus (s)
  # This can for example start all acquisitions at the same time within a
  # cellular frame.
  periodic_trigger: 10e-3

  # calibration data path
  # - if a relative path, it is interpreted as relative to this yaml
  # - if not specified, IQ is normalized as ADC full scale
  calibration: ../../calibrations/Air7201B-{radio_id}.p

  # if true, sync to PPS before each capture; otherwise, only once before the sweep
  time_sync_every_capture: False


# These settings are used unless specified otherwise for each capture
defaults:
  # RF Center frequency (Hz)
  center_frequency: 3710e6

  # A channel index, or list of channel indexes for multichannel acquisition
  # Examples:
  #    0 # for RX1
  #    [0,1] # for both RX1 and RX2
  channel: 0

  # Hardware RX gain setting, or a list of gain settings for each channel matching the
  # length of channel (above)
  #
  # Range is hardware-dependent - see the gain limits specified by
  #   src/edge_sensor/radio/*.py
  # Examples:
  #    -10 # apply -10 dB gain to all channels
  #    [-10, 0] # -10 dB on RX1 and 0 dB on RX2
  gain: -10 # dB

  # acquisition duration (s)
  duration: 0.1

  # waveform sample rate (samples/s)
  sample_rate: 15.36e6

  # filter bandwidth:
  # - bandwidth of a digital filter to apply to the waveform (Hz), or
  # - 'inf' to skip filtering
  analysis_bandwidth: inf

  # digitally shift the LO out of the acquisition band: 'left', 'right', 'none'
  lo_shift: none

  # whether to apply computation-intensive resampling on the host
  # from a divisor of the radio's master clock rate.
  #
  # if false, radio firmware will perform the resampling
  host_resample: true


# A list of dictionaries that specify the characteristics of the sweep captures to acquire.
# The sweep is executed by stepping each capture in order.
#
# The size of the `capture` dimension in the xarray Dataset output from `edge-sensor-sweep`
# will match the number of entries given here. 
captures:
  - center_frequency: 3750e6 # Hz
    analysis_bandwidth: 100e6 # Hz
    sample_rate: 153.6e6 # Hz
    gain: -10 # dB

  - center_frequency: 3830e6 # Hz
    analysis_bandwidth: 60e6 # Hz
    sample_rate: 92.16e6 # Hz
    gain: -10 # dB

  - center_frequency: 3900e6 # Hz
    analysis_bandwidth: 80e6 # Hz
    sample_rate: 122.88e6 # Hz
    gain: -10 # dB

  - center_frequency: 3960e6 # Hz
    sample_rate: 61.44e6 # Hz
    analysis_bandwidth: 40e6 # Hz
    gain: -10 # dB

  - center_frequency: 3750e6 # Hz
    analysis_bandwidth: 100e6 # Hz
    sample_rate: 153.6e6 # Hz
    gain: [0] # dB

  - center_frequency: 3830e6 # Hz
    analysis_bandwidth: 60e6 # Hz
    sample_rate: 92.16e6 # Hz
    gain: [0] # dB

  - center_frequency: 3900e6 # Hz
    analysis_bandwidth: 80e6 # Hz
    sample_rate: 122.88e6 # Hz
    gain: [0] # dB

  - center_frequency: 3960e6 # Hz
    sample_rate: 61.44e6 # Hz
    analysis_bandwidth: 40e6 # Hz
    gain: [0] # dB


# Specify the output analyses performed for each capture.
# - Each analysis key name corresponds with a function
#   * These are decorated by @expose_in_yaml in files in src/channel_analysis/factory
#   * The parameters specified here are passed in as keyword arguments in this function
# - The xarray.Dataset output from this sweep will include a data variable
#   matching the name of each of these analysis
channel_analysis:

    # channel power vs time
    channel_power_time_series:
        # time bin size
        detector_period: 0.0005

        # list of statistics to evaluate in each detector time bin:
        # 'min', 'max' (or equivalent 'peak'), 'mean' (or equivalent 'rms'), or a quantile number
        power_detectors:
        - rms
        - peak

    # cyclic autocorrelation function for cellular OFDM cyclic prefixes
    cellular_cyclic_autocorrelation:
        # evaluate for the following cellular SCS
        subcarrier_spacings:
        - 15000
        - 30000
        - 60000

        # evaluate slot numbers specific to each link
        downlink_slots: [0,  5,  6,  7,  8,  9, 10, 15, 16, 17, 18, 19]
        uplink_slots: [3, 13]

        # the evaluation can be expensive; limit to this number of frames
        frame_range: [0,1]

        # if true, return a correlation; otherwise, return a covariance (power)
        normalize: true

    # histogram evaluated on channel power in the time domain
    channel_power_histogram:
        # binning is performed on the power axis to allow aggregation across captures
        power_low: -40 # dBm
        power_high: 15 # dBm
        power_resolution: 0.25

    # a cyclic analysis of total power in the time domain 
    cyclic_channel_power:
        cyclic_period: 10e-3
        cyclic_statistics:
        # any of "min", "mean", "max", or a quantile number 
        - min
        - mean
        - max
        detector_period: 1.6666666666666667e-05
        power_detectors:
        - rms
        - peak

    # a persistence spectrum evaluated along the spectrogram
    power_spectral_density:
        # a list of statistics to apply across the frequency axis
        # 'min', 'max' (or equivalent 'peak'), 'mean' (or equivalent 'rms'), or a quantile number
        frequency_statistics:
        - mean
        - 0.5
        - 0.75
        - 0.9
        - 0.95
        - 0.99
        - 0.999
        - max

        # Step size in the frequency domain (Hz).
        # This sets the FFT size based on the capture sample rate
        frequency_resolution: 15000

        # Fractional overlap in the STFT.
        # (Examples: 0: no overlap, 0.5: 50% overlap)
        fractional_overlap: 0.

        # The spectrum analysis window to apply to the FFT. 
        # Valid values are documented here:
        #    https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.get_window.html
        window:
            - dpss
            - 3.87638403 # for enbw:resolution == 2:1

    # A spectrogram 
    spectrogram:
        # Same sampling and windowing persistence_spectrum
        frequency_resolution: 15000
        fractional_overlap: 0.
        window: 
            - dpss
            - 3.87638403

        # Performs video averaging along the frequency axis on
        # (video_bandwidth/frequency_resolution) bins and reduces
        # the returned resolution
        video_bandwidth: 360e3 # default: None (no averaging)

    # a histogram of all spectrogram power bins
    spectrogram_histogram:
        # Same spectrogram parameters as above
        frequency_resolution: 15000
        fractional_overlap: 0.
        window:
            - dpss
            - 3.87638403 # enbw/resolution ≈ 2
        video_bandwidth: 360e3

        # Same power bin parameters as channel_power_histogram
        power_low: -150
        power_high: 0
        power_resolution: 0.1

    # save a clipping of the received IQ waveform
    iq_waveform:
        start_time_sec: 0
        stop_time_sec: 0.1
